var TokenRegex_1 = require('../TokenRegex');
var Helpers_1 = require('../Helpers');
var MarkdownSpec = (function () {
    function MarkdownSpec() {
        this.block = {
            newline: /^\n+/,
            code: /^( {4}[^\n]+\n*)+/,
            hr: /^( *[-*_]){3,} *(?:\n+|$)/,
            heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
            lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
            blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
            def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
            paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|def))+)\n*/,
            text: /^[^\n]+/
        };
        this.inline = {
            escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
            autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
            //url: noop,
            tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
            link: /^!?\[(inside)\]\(href\)/,
            reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
            nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
            strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
            em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
            code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
            br: /^ {2,}\n(?!\s*$)/,
            //del: noop,
            text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/,
            _inside: /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/,
            _href: /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/
        };
        this.block.blockquote = Helpers_1.replace(this.block.blockquote)('def', this.block.def)();
        this.block.paragraph = Helpers_1.replace(this.block.paragraph)('hr', this.block.hr)('heading', this.block.heading)('lheading', this.block.lheading)('blockquote', this.block.blockquote)('def', this.block.def)();
        this.inline.link = Helpers_1.replace(this.inline.link)('inside', this.inline._inside)('href', this.inline._href)();
        this.inline.reflink = Helpers_1.replace(this.inline.reflink)('inside', this.inline._inside)();
        this.regexTokens = [
            new NewLine(this.block.newline),
            new CodeBlock(this.block.code),
            new HrBlock(this.block.hr),
            new BlockQuote(this.block.blockquote),
            new HeadingBlock(this.block.heading),
            new LHeading(this.block.lheading),
            new Paragraph(this.block.paragraph),
            new Text(this.block.text),
            // Inline
            new InlineText(this.inline.text)
        ];
    }
    MarkdownSpec.prototype.preProcess = function (source) {
        source.source
            .replace(/\r\n|\r/g, '\n')
            .replace(/\t/g, '    ')
            .replace(/\u00e0/g, ' ')
            .replace(/\u2424/g, '\n');
    };
    return MarkdownSpec;
})();
exports.MarkdownSpec = MarkdownSpec;
var NewLine = (function () {
    function NewLine(reg) {
        this.parseType = TokenRegex_1.TokenParseType.Block;
        this.priority = 0;
        this.regex = reg;
    }
    NewLine.prototype.validate = function (matches) {
        return true;
    };
    NewLine.prototype.apply = function (source, matches) {
        source.source = source.source.substring(matches[0].length);
        return [{}];
    };
    return NewLine;
})();
var CodeBlock = (function () {
    function CodeBlock(reg) {
        this.parseType = TokenRegex_1.TokenParseType.Block;
        this.priority = 1;
        this.regex = reg;
    }
    CodeBlock.prototype.validate = function (matches) {
        return true;
    };
    CodeBlock.prototype.apply = function (source, matches) {
        source.source = source.source.substring(matches[0].length);
        var cap = matches[0].replace(/^ {4}/gm, '');
        return [{ openTag: '<pre>\n\t<code>\n\t\t',
                closeTag: '\t</code>\n</pre>\n',
                text: { source: cap },
                sanitize: false }];
    };
    return CodeBlock;
})();
var HrBlock = (function () {
    function HrBlock(reg) {
        this.parseType = TokenRegex_1.TokenParseType.Block;
        this.priority = 2;
        this.regex = reg;
    }
    HrBlock.prototype.validate = function (matches) {
        return true;
    };
    HrBlock.prototype.apply = function (source, matches) {
        source.source = source.source.substring(matches[0].length);
        return [{ openTag: '<hr>\n' }];
    };
    return HrBlock;
})();
var HeadingBlock = (function () {
    function HeadingBlock(reg) {
        this.parseType = TokenRegex_1.TokenParseType.Block;
        this.priority = 3;
        this.regex = reg;
    }
    HeadingBlock.prototype.validate = function (matches) {
        return true;
    };
    HeadingBlock.prototype.apply = function (source, matches) {
        source.source = source.source.substring(matches[0].length);
        return [{ openTag: '<h' + matches[1].length + '>',
                closeTag: '</h' + matches[1].length + '>\n',
                text: { source: matches[2] } }];
    };
    return HeadingBlock;
})();
var LHeading = (function () {
    function LHeading(reg) {
        this.parseType = TokenRegex_1.TokenParseType.Block;
        this.priority = 4;
        this.regex = reg;
    }
    LHeading.prototype.validate = function (matches) {
        return true;
    };
    LHeading.prototype.apply = function (source, matches) {
        source.source = source.source.substring(matches[0].length);
        return [{ openTag: '<h' + (matches[2] === '=' ? 1 : 2) + '>',
                closeTag: '</h' + (matches[2] === '=' ? 1 : 2) + '>\n',
                text: { source: matches[1] } }];
    };
    return LHeading;
})();
var Paragraph = (function () {
    function Paragraph(reg) {
        this.parseType = TokenRegex_1.TokenParseType.Block;
        this.priority = 5;
        this.regex = reg;
    }
    Paragraph.prototype.validate = function (matches) {
        return true;
    };
    Paragraph.prototype.apply = function (source, matches) {
        source.source = source.source.substring(matches[0].length);
        return [{ openTag: '<p>',
                closeTag: '</p>\n',
                text: { source: matches[1].charAt(matches[1].length - 1) === '\n'
                        ? matches[1].slice(0, -1)
                        : matches[1] } }];
    };
    return Paragraph;
})();
var Text = (function () {
    function Text(reg) {
        this.parseType = TokenRegex_1.TokenParseType.Block;
        this.priority = 6;
        this.regex = reg;
    }
    Text.prototype.validate = function (matches) {
        return true;
    };
    Text.prototype.apply = function (source, matches) {
        source.source = source.source.substring(matches[0].length);
        return [{ text: { source: matches[0] } }];
    };
    return Text;
})();
var BlockQuote = (function () {
    function BlockQuote(reg) {
        this.parseType = TokenRegex_1.TokenParseType.Block;
        this.priority = 7;
        this.regex = reg;
    }
    BlockQuote.prototype.validate = function (matches) {
        return true;
    };
    BlockQuote.prototype.apply = function (source, matches) {
        source.source = source.source.substring(matches[0].length);
        return [{
                openTag: '<blockquote>\n',
                text: { source: matches[0].replace(/^ *> ?/gm, '') },
                processBlock: true
            },
            {
                closeTag: '</blockquote>\n'
            }];
    };
    return BlockQuote;
})();
var InlineText = (function () {
    function InlineText(reg) {
        this.parseType = TokenRegex_1.TokenParseType.Inline;
        this.priority = 10;
        this.regex = reg;
    }
    InlineText.prototype.validate = function (matches) {
        return true;
    };
    InlineText.prototype.apply = function (source, matches) {
        source.source = source.source.substring(matches[0].length);
        return [{ text: { source: matches[0] } }];
    };
    return InlineText;
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24uanMiLCJzb3VyY2VSb290IjoidHMvIiwic291cmNlcyI6WyJtb2Rlcy9tYXJrZG93bi50cyJdLCJuYW1lcyI6WyJNYXJrZG93blNwZWMiLCJNYXJrZG93blNwZWMuY29uc3RydWN0b3IiLCJNYXJrZG93blNwZWMucHJlUHJvY2VzcyIsIk5ld0xpbmUiLCJOZXdMaW5lLmNvbnN0cnVjdG9yIiwiTmV3TGluZS52YWxpZGF0ZSIsIk5ld0xpbmUuYXBwbHkiLCJDb2RlQmxvY2siLCJDb2RlQmxvY2suY29uc3RydWN0b3IiLCJDb2RlQmxvY2sudmFsaWRhdGUiLCJDb2RlQmxvY2suYXBwbHkiLCJIckJsb2NrIiwiSHJCbG9jay5jb25zdHJ1Y3RvciIsIkhyQmxvY2sudmFsaWRhdGUiLCJIckJsb2NrLmFwcGx5IiwiSGVhZGluZ0Jsb2NrIiwiSGVhZGluZ0Jsb2NrLmNvbnN0cnVjdG9yIiwiSGVhZGluZ0Jsb2NrLnZhbGlkYXRlIiwiSGVhZGluZ0Jsb2NrLmFwcGx5IiwiTEhlYWRpbmciLCJMSGVhZGluZy5jb25zdHJ1Y3RvciIsIkxIZWFkaW5nLnZhbGlkYXRlIiwiTEhlYWRpbmcuYXBwbHkiLCJQYXJhZ3JhcGgiLCJQYXJhZ3JhcGguY29uc3RydWN0b3IiLCJQYXJhZ3JhcGgudmFsaWRhdGUiLCJQYXJhZ3JhcGguYXBwbHkiLCJUZXh0IiwiVGV4dC5jb25zdHJ1Y3RvciIsIlRleHQudmFsaWRhdGUiLCJUZXh0LmFwcGx5IiwiQmxvY2tRdW90ZSIsIkJsb2NrUXVvdGUuY29uc3RydWN0b3IiLCJCbG9ja1F1b3RlLnZhbGlkYXRlIiwiQmxvY2tRdW90ZS5hcHBseSIsIklubGluZVRleHQiLCJJbmxpbmVUZXh0LmNvbnN0cnVjdG9yIiwiSW5saW5lVGV4dC52YWxpZGF0ZSIsIklubGluZVRleHQuYXBwbHkiXSwibWFwcGluZ3MiOiJBQUNBLDJCQUFtRCxlQUFlLENBQUMsQ0FBQTtBQUVuRSx3QkFBc0IsWUFFdEIsQ0FBQyxDQUZpQztBQUVsQztJQWdDQ0E7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